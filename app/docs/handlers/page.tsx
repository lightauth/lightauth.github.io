import { CodeBlock } from "@/components/code-block";
import { Callout } from "@/components/ui/callout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BookOpen, Code, FileText, Info } from "lucide-react";
import type { Metadata } from "next";
import { ThemeToggle } from "@/components/theme-toggle";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import Image from "next/image";
import { Bullet } from "@/components/bullet";
import { ExternalLink } from "@/components/external-link";
export const metadata: Metadata = {
  title: "Authentication Flow - Light-Auth Documentation",
  description: "Understanding the authentication flow in Light-Auth.",
};

export default function SsrRequirementsPage() {
  return (
    <div className="space-y-6">
      <h1>API Handlers</h1>
      <p className="text-lg text-muted-foreground">How to integrate Ligh-AUth with the routing mechanisms of SSR Frameworks.</p>

      <section className="mb-12">
        <h2>
          <BookOpen className="text-blue-600 mr-2" />
          API Handlers Overview
        </h2>
        <p>
          Light-Auth requires specific API routes to handle authentication flows, including OAuth redirects, callbacks, and session management. These routes are
          automatically generated by Light-Auth, but you need to expose them through your framework's routing system.
        </p>

        <h3 className="text-lg font-medium text-slate-900 dark:text-white mt-6">What API handlers do:</h3>
        <div className="py-4 space-y-4">
          <div className="flex">
            <Bullet>1</Bullet>
            <p>
              <strong>OAuth Authorization:</strong> Handle the initial redirect to the OAuth provider.
            </p>
          </div>

          <div className="flex">
            <Bullet>2</Bullet>
            <p>
              <strong>OAuth Callbacks:</strong> Process the response from the OAuth provider after authentication.
            </p>
          </div>

          <div className="flex">
            <Bullet>3</Bullet>
            <p>
              <strong>Session & User Management:</strong> Create and validate session / user payloads, and save in cookies / datastore.
            </p>
          </div>

          <div className="flex">
            <Bullet>4</Bullet>
            <p>
              <strong>Token Refresh:</strong> Handle automatic refresh of access tokens.
            </p>
          </div>

          <div className="flex">
            <Bullet>5</Bullet>
            <p>
              <strong>Sign In / Out:</strong> Manage the login / logout processes.
            </p>
          </div>
        </div>

        <Callout variant="info" className="mb-4">
          The API handlers are automatically generated by Light-Auth when you call the{" "}
          <code className="bg-blue-100 dark:bg-blue-900 px-1 py-0.5 rounded text-xs">CreateLightAuth()</code> function. You just need to expose them through
          your framework's routing system.
        </Callout>

        <CodeBlock lang="ts" className="mb-4" title="./src/app/auth.ts">
          {`import { CreateLightAuth } from "@light-auth/nextjs";

export const { 
  providers,  
  handlers,   // <--------- API route handlers
  signIn,     
  signOut,    
  getSession, 
  getUser     
} = CreateLightAuth({providers: [googleProvider]});`}
        </CodeBlock>

        <h2>
          <BookOpen className="text-blue-600 mr-2" />
          Integration with SSR Frameworks
        </h2>
        <p>Once you have set up the API handlers, you need to integrate them with your SSR framework's routing system.</p>
        <p className="mb-4">Here are some examples, depending on the framework you are using:</p>

        <Tabs defaultValue="nextjs" className="mb-8">
          <TabsList className="flex w-full justify-start gap-5 mb-4">
            <TabsTrigger value="nextjs" className="gap-2">
              <Image src="/nextjs.svg" alt="Next.js Logo" width={12} height={12} className="w-5 h-5 p-0 m-0" />
              NextJS
            </TabsTrigger>
            <TabsTrigger value="astro" className="gap-2">
              <Image src="/astro.svg" alt="Astro Logo" width={12} height={12} className="w-5 h-5 p-0 m-0" />
              Astro
            </TabsTrigger>
            <TabsTrigger value="express" className="gap-2">
              <Image src="/express.svg" alt="Express Logo" width={12} height={12} className="w-5 h-5 p-0 m-0" />
              Express
            </TabsTrigger>
            <TabsTrigger value="nuxtjs" className="gap-2">
              <Image src="/nuxtjs.svg" alt="Nuxt.js Logo" width={12} height={12} className="w-5 h-5 p-0 m-0" />
              Nuxt.js
            </TabsTrigger>
            <TabsTrigger value="sveltekit" className="gap-2">
              <Image src="/sveltekit.svg" alt="SvelteKit Logo" width={12} height={12} className="w-5 h-5 p-0 m-0" />
              SvelteKit
            </TabsTrigger>
            <TabsTrigger value="qwik" className="gap-2">
              <Image src="/qwik.svg" alt="Qwik Logo" width={12} height={12} className="w-5 h-5 p-0 m-0" />
              Qwik
            </TabsTrigger>
          </TabsList>

          <TabsContent value="nextjs">
            <Card>
              <CardContent className="mt-4">
                <p>
                  By default, <strong>Light-Auth</strong> expects the API handlers to be exposed at <code>/api/auth/[...lightauth]</code>.
                </p>
                <p className="mb-4">Once created, add the code to intercept requests:</p>

                <CodeBlock lang="ts" title="/app/api/auth/[...lightauth]/route.ts" className="mb-4">
                  {`import { handlers } from "@/lib/auth";

export const { GET, POST } = handlers;`}
                </CodeBlock>

                <Callout variant="warning" className="mb-4">
                  Make sure to use the correct destructuring syntax <code>export const {"{ GET, POST }"} = handlers;</code> to properly expose the route
                  handlers.
                </Callout>

                <p>
                  This file exposes the Light-Auth handlers to handle all authentication-related requests.
                  <br />
                  The <code>[...lightauth]</code> <i>catch-all route parameter</i> allows <strong>Light-Auth</strong> to handle various authentication paths
                  like <code>/api/auth/signin/google</code> or <code>/api/auth/callback/google</code>.
                </p>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="astro">
            <Card>
              <CardContent className="mt-4">
                <p>
                  By default, <strong>Light-Auth</strong> expects the API handlers to be exposed at <code>/api/auth/[...lightauth]</code>.
                </p>
                <p className="mb-4">Once created, add the code to intercept requests:</p>

                <CodeBlock lang="ts" title="/pages/api/auth/[...lightauth]/route.ts" className="mb-4">
                  {`import type { APIRoute } from "astro";
import { handlers } from "@/lib/auth";

export const {GET, POST} : {GET: APIRoute, POST: APIRoute} = handlers;
`}
                </CodeBlock>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="express">
            <Card>
              <CardContent className="mt-4">
                <p>
                  By default, <strong>Light-Auth</strong> expects to register a route using the <code>app.use()</code> function.
                </p>
                <p>
                  Usually, this file is located in the <code>src/app.ts</code> file.
                </p>

                <p className="mb-4">Once created, add the code to intercept requests:</p>

                <CodeBlock lang="ts" title="/src/app.ts" className="mb-4">
                  {`import { getSession, getUser, handlers, middleware, signIn, signOut } from "./auth";

// handlers for everything related to light-auth
app.use("/api/auth/", handlers);
`}
                </CodeBlock>

                <Callout variant="warning" className="mb-4">
                  When using Express, the basePath option in <code>CreateLightAuth</code> determines the path you should use with <code>app.use()</code>.
                  <br />
                  For example, if you set <code>basePath: "/custom/auth"</code>, use <code>app.use("/custom/auth/", handlers);</code> to match the correct
                  route.
                </Callout>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="nuxtjs">
            <Card>
              <CardContent className="mt-4">
                <p>
                  By default, <strong>Light-Auth</strong> expects the API handlers to be exposed at <code>/pages/api/auth/[...lightauth]/route.ts</code>.
                </p>
                <p className="mb-4">Once created, add the code to intercept requests:</p>

                <CodeBlock lang="ts" title="/pages/api/auth/[...lightauth]/route.ts" className="mb-4">
                  {`import { handlers } from "~/lib/auth";

export default defineEventHandler(async (event) => {
  const method = event.node.req.method;
  
  if (method === "GET") {
    return await handlers.GET(event.node.req, event.node.res);
  } else if (method === "POST") {
    return await handlers.POST(event.node.req, event.node.res);
  }
  
  return createError({
    statusCode: 405,
    statusMessage: "Method not allowed"
  });
});`}
                </CodeBlock>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="sveltekit">
            <Card>
              <CardContent className="mt-4">
                <p>
                  By default, <strong>Light-Auth</strong> expects the API handlers to be exposed at <code>/src/routes/api/auth/[...lightauth]/+server.ts</code>.
                </p>
                <p className="mb-4">Once created, add the code to intercept requests:</p>

                <CodeBlock lang="ts" title="/src/routes/api/auth/[...lightauth]/+server.ts" className="mb-4">
                  {`import { handlers } from "$lib/auth";
import type { RequestHandler } from "./$types";

export const GET: RequestHandler = async ({ request }) => {
  return await handlers.GET(request);
};

export const POST: RequestHandler = async ({ request }) => {
  return await handlers.POST(request);
};`}
                </CodeBlock>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <div>
          <h2>
            <BookOpen className="text-blue-600 mr-2" />
            Custom Base Path
          </h2>

          <p>
            The default base path for Light-Auth is <code>/api/auth</code>. This means that the API handlers are expected to be exposed at{" "}
            <code>/[ROOT]/api/auth/[...lightauth]/route.ts</code>.
          </p>

          <p className="mb-4">
            You can customize the base path by providing the <code>basePath</code> option to the <code>CreateLightAuth</code> function:
          </p>

          <CodeBlock lang="ts" className="mb-4" title="app/lib/auth.ts">
            {`import { CreateLightAuth } from "@light-auth/nextjs";

// Initialize Light-Auth with custom base path
export const allHandlers = CreateLightAuth({
  providers: [googleProvider],
  basePath: "/custom/auth", // <---------------- Custom base path
});`}
          </CodeBlock>

          <p className=" mb-4">
            With this custom base path, instead of creating your file at <code>/[ROOT]/api/auth/[...lightauth]/route.ts</code>, you need to create your route
            handler file at: <code>/[ROOT]/custom/auth/[...lightauth]/route.ts</code>
          </p>
          <p className=" mb-4">
            As an example, using <strong>NextJs</strong> if you set the base path to <code>/custom/auth</code>, you would create your route handler file at{" "}
            <code>/app/custom/auth/[...lightauth]/route.ts</code>:
          </p>

          <CodeBlock lang="ts" className="mb-4" title="/app/custom/auth/[...lightauth]/route.ts">
            {`import { handlers } from "@/lib/auth";
export const { GET, POST } = handlers;`}
          </CodeBlock>

          <Callout variant="info" className="mb-4">
            <strong>Important:</strong> When changing the base path, make sure to update the callback URLs in your OAuth provider configuration as well.
          </Callout>
        </div>

        <div>
          <h3 className="mb-3">[...lightauth]</h3>
          <p className=" mb-4">
            The <code>[...lightauth]</code> <i>catch-all-routes</i> parameter is mandatory for Light-Auth to work correctly, but you can customize the name if
            needed.
            <br />
            For example, you can change it to <code>[...auth]</code>,<code>[...hdlers]</code>,<code>[...something]</code> or any other name that fits your
            routing structure.
          </p>

          <Callout variant="warning" className="mb-4">
            This notion of a catch-all route parameter is specific to the framework you are using. It does not exist in express, for example.
          </Callout>
        </div>

        <h2>
          <BookOpen className="text-blue-600 mr-2" />
          Understanding the Route Structure
        </h2>

        <div className="space-y-4">
          <p>Light-Auth creates several endpoints under the base path to handle different aspects of the authentication flow:</p>
          <p>
            Supposing you didn't set a custom base path (it's then <code>/api/auth</code> as default), the following routes are handled by{" "}
            <strong>Light-Auth</strong>:
          </p>

          <div className="overflow-x-auto">
            <Table className="w-full border">
              <TableHeader>
                <TableRow className="bg-slate-100 dark:bg-slate-800">
                  <TableHead>Route</TableHead>
                  <TableHead>Method</TableHead>
                  <TableHead>Purpose</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                <TableRow>
                  <TableCell className="align-baseline">
                    <code>/api/auth/login/:providerName?callbackUrl=:callbackUrl</code>
                  </TableCell>
                  <TableCell className="align-baseline">GET</TableCell>
                  <TableCell>
                    Initiates the OAuth flow by redirecting to the provider's authorization page.
                    <ul className="list-disc pl-5 space-y-1">
                      <li>
                        The <code>providerName</code> is the name of the OAuth provider (e.g., <code>google</code>, <code>github</code>), you defined when
                        creating the provider.
                        <br /> It's arbitrary and can be anything you want:
                      </li>
                      <CodeBlock lang="ts" className="mt-2">
                        {`import { googleProvider } from "@light-auth/nextjs";
const googleProvider: LightAuthProvider = {
  providerName: "google", // <--- This is the provider name, you can change it to anything you want
  arctic: new Google(...),
};                      
                      `}
                      </CodeBlock>
                      <li>
                        The <code>callbackUrl</code> is the URL to redirect to after successful authentication. It can be a relative or absolute URL.
                      </li>
                    </ul>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <code>/api/auth/logout?revokeToken=:boolean&callbackUrl=:callbackUrl</code>
                  </TableCell>
                  <TableCell>GET</TableCell>
                  <TableCell>
                    Handles the logout process and clears the session.
                    <ul className="list-disc pl-5 space-y-1">
                      <li>
                        The <code>revokeToken</code> parameter indicates whether to revoke the access token from the OAuth provider.
                      </li>
                      <li>
                        The <code>callbackUrl</code> is the URL to redirect to after logout. It can be a relative or absolute URL.
                      </li>
                    </ul>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <code>/api/auth/callback/:provider</code>
                  </TableCell>
                  <TableCell>GET</TableCell>
                  <TableCell>
                    <p className="mb-2">Handles the callback from the OAuth provider during OAuth authentication.</p>
                    <Callout className="p-1" variant="success">
                      You should not call this route directly. It is only meant to be used internally by <strong>Light-Auth</strong>.
                    </Callout>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <code>/api/auth/session</code>
                  </TableCell>
                  <TableCell>GET</TableCell>
                  <TableCell>
                    Returns the current session information. Can be <code>null</code> if user is not authenticated.
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    <code>/api/auth/user</code>
                  </TableCell>
                  <TableCell>GET</TableCell>
                  <TableCell>
                    Returns the current user information. Can be <code>null</code> if user is not authenticated or no <code>UserAdapter</code> has been
                    configured.
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </div>

          <p className="mb-4">
            All these routes are handled by <strong>Ligth-Auth</strong>, and you don't need to call them directly.
            <br />
            However, this is something you still cand do, from a client-side component, for example:
          </p>
          <CodeBlock lang="ts" className="mb-4">
            {`const response = await fetch('/api/auth/session');
const data = await response.json();
console.log(data); // undefined if user is not authenticated otherwise {  name: "John Doe", email: "john.doe@example.com" , ...}
              `}
          </CodeBlock>
        </div>

        <h2>
          <BookOpen className="text-blue-600 mr-2" />
          Recommendations
        </h2>
        <p className="mb-4">Recommendations for optimal routing integration</p>

        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
              <h4 className="font-medium text-slate-900 dark:text-white mb-2">Use Consistent Base Paths</h4>
              <p className="text-slate-600 dark:text-slate-400">
                Keep your authentication routes under a consistent path structure to make your application easier to maintain.
              </p>
            </div>

            <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
              <h4 className="font-medium text-slate-900 dark:text-white mb-2">Update Redirect URLs</h4>
              <p className="text-slate-600 dark:text-slate-400">
                When changing the base path, always update the redirect URLs in both your OAuth provider configuration and your Light-Auth setup.
              </p>
            </div>

            <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
              <h4 className="font-medium text-slate-900 dark:text-white mb-2">Secure Your Routes</h4>
              <p className="text-slate-600 dark:text-slate-400">
                Consider adding additional security measures like rate limiting to your authentication routes to prevent abuse.
              </p>
            </div>

            <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
              <h4 className="font-medium text-slate-900 dark:text-white mb-2">Test Your Routes</h4>
              <p className="text-slate-600 dark:text-slate-400">
                Always test your authentication routes thoroughly after setup to ensure they're working correctly.
              </p>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}
