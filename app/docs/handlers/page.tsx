import { CodeBlock } from "@/components/code-block";
import { Callout } from "@/components/ui/callout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BookOpen, FileText, Info } from "lucide-react";
import type { Metadata } from "next";
import { ThemeToggle } from "@/components/theme-toggle";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import Image from "next/image";
import { Bullet } from "@/components/bullet";
import { ExternalLink } from "@/components/external-link";
export const metadata: Metadata = {
  title: "Authentication Flow - Light-Auth Documentation",
  description: "Understanding the authentication flow in Light-Auth.",
};

export default function SsrRequirementsPage() {
  return (
    <div className="space-y-6">
      <h1>API Handlers</h1>
      <p className="text-lg text-muted-foreground">How to integrate Ligh-AUth with the routing mechanisms of SSR Frameworks.</p>

      <section className="mb-12">
        <h2>
          <BookOpen className="text-blue-600 mr-2" />
          API Handlers Overview
        </h2>
        <p>
          Light-Auth requires specific API routes to handle authentication flows, including OAuth redirects, callbacks, and session management. These routes are
          automatically generated by Light-Auth, but you need to expose them through your framework's routing system.
        </p>

        <h3 className="text-lg font-medium text-slate-900 dark:text-white mt-6">What API Handlers Do</h3>
        <div className="py-4 space-y-4">
          <div className="flex">
            <Bullet>1</Bullet>
            <p>
              <strong>OAuth Authorization:</strong> Handle the initial redirect to the OAuth provider
            </p>
          </div>

          <div className="flex">
            <Bullet>2</Bullet>
            <p>
              <strong>OAuth Callbacks:</strong> Process the response from the OAuth provider after authentication
            </p>
          </div>

          <div className="flex">
            <Bullet>3</Bullet>
            <p>
              <strong>Session Management:</strong> Create, validate, and refresh authentication sessions
            </p>
          </div>

          <div className="flex">
            <Bullet>4</Bullet>
            <p>
              <strong>Token Refresh:</strong> Handle automatic refresh of access tokens
            </p>
          </div>

          <div className="flex">
            <Bullet>5</Bullet>
            <p>
              <strong>Sign Out:</strong> Manage the logout process and session cleanup
            </p>
          </div>
        </div>

        <Callout variant="info" className="mb-4">
          The API handlers are automatically generated by Light-Auth when you call the{" "}
          <code className="bg-blue-100 dark:bg-blue-900 px-1 py-0.5 rounded text-xs">CreateLightAuth()</code> function. You just need to expose them through
          your framework's routing system.
        </Callout>

        <CodeBlock lang="ts" className="mb-4" title="./src/app/auth.ts">
          {`import { CreateLightAuth } from "@light-auth/nextjs";

export const { 
  providers,  // Array of configured providers
  handlers,   // API route handlers
  signIn,     // Function to initiate sign-in
  signOut,    // Function to sign out
  getSession, // Function to get the current session
  getUser     // Function to get the complete user data
} = CreateLightAuth({
  providers: [googleProvider, microsoftProvider],
});`}
        </CodeBlock>

        <h2>
          <BookOpen className="text-blue-600 mr-2" />
          Integration with SSR Frameworks
        </h2>
        <Tabs defaultValue="nextjs" className="mb-8">
          <TabsList className="mb-4">
            <TabsTrigger value="nextjs">Next.js (App Router)</TabsTrigger>
            <TabsTrigger value="nextjs-pages">Next.js (Pages Router)</TabsTrigger>
            <TabsTrigger value="other">Other Frameworks</TabsTrigger>
          </TabsList>

          <TabsContent value="nextjs">
            <Card>
              <CardHeader>
                <CardTitle>Next.js App Router Integration</CardTitle>
                <CardDescription>Setting up API routes in Next.js App Router</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-3">Default Configuration</h3>
                    <p className=" mb-4">
                      By default, Light-Auth expects the API handlers to be exposed at{" "}
                      <code className="bg-slate-100 dark:bg-slate-800 px-1 py-0.5 rounded text-sm">/api/auth/[...lightauth]</code>. In Next.js App Router, you
                      need to create the following file:
                    </p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">app/api/auth/[...lightauth]/route.ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { handlers } from "@/lib/auth";

export const { GET, POST } = handlers;`}
                      </pre>
                    </div>

                    <Alert className="mb-6 bg-amber-50 dark:bg-amber-950/30 border-amber-200 dark:border-amber-800">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className="h-4 w-4 text-amber-600 dark:text-amber-400"
                      >
                        <path d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
                        <path d="M12 9v4" />
                        <path d="M12 17h.01" />
                      </svg>
                      <AlertTitle className="text-amber-800 dark:text-amber-300">Important</AlertTitle>
                      <AlertDescription className="text-amber-700 dark:text-amber-400">
                        Make sure to use the correct destructuring syntax{" "}
                        <code className="bg-amber-100 dark:bg-amber-900 px-1 py-0.5 rounded text-xs">export const {"{ GET, POST }"} = handlers;</code> to
                        properly expose the route handlers.
                      </AlertDescription>
                    </Alert>

                    <p>
                      This file exposes the Light-Auth handlers to handle all authentication-related requests. The{" "}
                      <code className="bg-slate-100 dark:bg-slate-800 px-1 py-0.5 rounded text-sm">[...lightauth]</code> catch-all route parameter allows
                      Light-Auth to handle various authentication paths like{" "}
                      <code className="bg-slate-100 dark:bg-slate-800 px-1 py-0.5 rounded text-sm">/api/auth/signin/google</code> and{" "}
                      <code className="bg-slate-100 dark:bg-slate-800 px-1 py-0.5 rounded text-sm">/api/auth/callback/google</code>.
                    </p>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-3">Custom Base Path</h3>
                    <p className=" mb-4">
                      You can customize the base path by providing the{" "}
                      <code className="bg-slate-100 dark:bg-slate-800 px-1 py-0.5 rounded text-sm">basePath</code> option to the{" "}
                      <code className="bg-slate-100 dark:bg-slate-800 px-1 py-0.5 rounded text-sm">CreateLightAuth</code> function:
                    </p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">lib/auth.ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { CreateLightAuth } from "@light-auth/nextjs";
import { Google } from "arctic";

// Configure Google provider
const googleProvider = {
  providerName: "google",
  artic: new Google(
    process.env.GOOGLE_CLIENT_ID || "",
    process.env.GOOGLE_CLIENT_SECRET || "",
    "http://localhost:3000/custom/auth/callback/google"
  ),
  searchParams: new Map([["access_type", "offline"]]),
};

// Initialize Light-Auth with custom base path
export const { 
  providers,
  handlers,
  signIn,
  signOut,
  getSession,
  getUser
} = CreateLightAuth({
  providers: [googleProvider],
  basePath: "/custom/auth", // Custom base path
  session: {
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
});`}
                      </pre>
                    </div>

                    <p className=" mb-4">With this custom base path, you need to create your route handler file at:</p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">app/custom/auth/[...lightauth]/route.ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { handlers } from "@/lib/auth";

export const { GET, POST } = handlers;`}
                      </pre>
                    </div>

                    <div className="bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mt-4">
                      <div className="flex items-start">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-blue-500 mr-2 mt-0.5"
                        >
                          <circle cx="12" cy="12" r="10" />
                          <path d="M12 16v-4" />
                          <path d="M12 8h.01" />
                        </svg>
                        <div>
                          <p className="text-sm text-blue-700 dark:text-blue-300">
                            <strong>Important:</strong> When changing the base path, make sure to update the callback URLs in your OAuth provider configuration
                            as well.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="nextjs-pages">
            <Card>
              <CardHeader>
                <CardTitle>Next.js Pages Router Integration</CardTitle>
                <CardDescription>Setting up API routes in Next.js Pages Router</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-3">Default Configuration</h3>
                    <p className=" mb-4">For Next.js Pages Router, you need to create a catch-all API route file:</p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">pages/api/auth/[...lightauth].ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { handlers } from "@/lib/auth";
import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "GET") {
    return await handlers.GET(req, res);
  } else if (req.method === "POST") {
    return await handlers.POST(req, res);
  }
  
  return res.status(405).json({ error: "Method not allowed" });
}`}
                      </pre>
                    </div>

                    <p>
                      This file handles all authentication-related requests in the Pages Router format. The{" "}
                      <code className="bg-slate-100 dark:bg-slate-800 px-1 py-0.5 rounded text-sm">[...lightauth]</code> catch-all route parameter works the
                      same way as in the App Router.
                    </p>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-3">Custom Base Path</h3>
                    <p className=" mb-4">Similar to the App Router, you can customize the base path:</p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">lib/auth.ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`// Initialize Light-Auth with custom base path
export const { 
  providers,
  handlers,
  signIn,
  signOut,
  getSession,
  getUser
} = CreateLightAuth({
  providers: [googleProvider],
  basePath: "/api/custom-auth", // Custom base path for Pages Router
  session: {
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
});`}
                      </pre>
                    </div>

                    <p className=" mb-4">With this custom base path, create your API handler at:</p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">pages/api/custom-auth/[...lightauth].ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { handlers } from "@/lib/auth";
import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "GET") {
    return await handlers.GET(req, res);
  } else if (req.method === "POST") {
    return await handlers.POST(req, res);
  }
  
  return res.status(405).json({ error: "Method not allowed" });
}`}
                      </pre>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="other">
            <Card>
              <CardHeader>
                <CardTitle>Other SSR Frameworks</CardTitle>
                <CardDescription>Integration with other server-side rendering frameworks</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-3">Astro Integration</h3>
                    <p className=" mb-4">For Astro with SSR enabled, create an API endpoint file:</p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">src/pages/api/auth/[...lightauth].ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { handlers } from "../../../lib/auth";
import type { APIRoute } from "astro";

export const get: APIRoute = async ({ request }) => {
  return await handlers.GET(request);
};

export const post: APIRoute = async ({ request }) => {
  return await handlers.POST(request);
};`}
                      </pre>
                    </div>

                    <div className="bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800 rounded-lg p-4 mt-4">
                      <div className="flex items-start">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-amber-500 mr-2 mt-0.5"
                        >
                          <path d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
                          <path d="M12 9v4" />
                          <path d="M12 17h.01" />
                        </svg>
                        <div>
                          <p className="text-sm text-amber-700 dark:text-amber-300">
                            <strong>Note:</strong> Astro integration is currently in development. The exact API may change in future releases.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-3">SvelteKit Integration</h3>
                    <p className=" mb-4">For SvelteKit, create a server route handler:</p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">src/routes/api/auth/[...lightauth]/+server.ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { handlers } from "$lib/auth";
import type { RequestHandler } from "./$types";

export const GET: RequestHandler = async ({ request }) => {
  return await handlers.GET(request);
};

export const POST: RequestHandler = async ({ request }) => {
  return await handlers.POST(request);
};`}
                      </pre>
                    </div>

                    <div className="bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800 rounded-lg p-4 mt-4">
                      <div className="flex items-start">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-amber-500 mr-2 mt-0.5"
                        >
                          <path d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
                          <path d="M12 9v4" />
                          <path d="M12 17h.01" />
                        </svg>
                        <div>
                          <p className="text-sm text-amber-700 dark:text-amber-300">
                            <strong>Note:</strong> SvelteKit integration is currently in development. The exact API may change in future releases.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium text-slate-900 dark:text-white mb-3">Nuxt.js Integration</h3>
                    <p className=" mb-4">For Nuxt.js, create a server API route:</p>

                    <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800 mb-6">
                      <div className="flex items-center mb-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-slate-500 mr-2"
                        >
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                          <polyline points="14 2 14 8 20 8" />
                        </svg>
                        <span className="text-sm font-medium ">server/api/auth/[...lightauth].ts</span>
                      </div>
                      <pre className="text-sm overflow-auto text-slate-800 dark:text-slate-200">
                        {`import { handlers } from "~/lib/auth";

export default defineEventHandler(async (event) => {
  const method = event.node.req.method;
  
  if (method === "GET") {
    return await handlers.GET(event.node.req, event.node.res);
  } else if (method === "POST") {
    return await handlers.POST(event.node.req, event.node.res);
  }
  
  return createError({
    statusCode: 405,
    statusMessage: "Method not allowed"
  });
});`}
                      </pre>
                    </div>

                    <div className="bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800 rounded-lg p-4 mt-4">
                      <div className="flex items-start">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-amber-500 mr-2 mt-0.5"
                        >
                          <path d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
                          <path d="M12 9v4" />
                          <path d="M12 17h.01" />
                        </svg>
                        <div>
                          <p className="text-sm text-amber-700 dark:text-amber-300">
                            <strong>Note:</strong> Nuxt.js integration is currently in development. The exact API may change in future releases.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Understanding the Route Structure</CardTitle>
            <CardDescription>How Light-Auth uses the API routes for authentication flows</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <p>Light-Auth creates several endpoints under the base path to handle different aspects of the authentication flow:</p>

              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="bg-slate-100 dark:bg-slate-800">
                      <th className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-left text-sm font-medium ">Route</th>
                      <th className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-left text-sm font-medium ">Method</th>
                      <th className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-left text-sm font-medium ">Purpose</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm  font-mono">/api/auth/signin/:provider</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">GET</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">
                        Initiates the OAuth flow by redirecting to the provider's authorization page
                      </td>
                    </tr>
                    <tr>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm  font-mono">/api/auth/callback/:provider</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">GET</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">
                        Handles the callback from the OAuth provider after authentication
                      </td>
                    </tr>
                    <tr>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm  font-mono">/api/auth/session</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">GET</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">Returns the current session information</td>
                    </tr>
                    <tr>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm  font-mono">/api/auth/signout</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">POST</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">Handles the sign-out process and clears the session</td>
                    </tr>
                    <tr>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm  font-mono">/api/auth/refresh</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">POST</td>
                      <td className="border border-slate-200 dark:border-slate-700 px-4 py-2 text-sm ">Refreshes the access token using the refresh token</td>
                    </tr>
                  </tbody>
                </table>
              </div>

              <div className="bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mt-6">
                <div className="flex items-start">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="text-blue-500 mr-2 mt-0.5"
                  >
                    <circle cx="12" cy="12" r="10" />
                    <path d="M12 16v-4" />
                    <path d="M12 8h.01" />
                  </svg>
                  <div>
                    <p className="text-sm text-blue-700 dark:text-blue-300">
                      <strong>Note:</strong> All these routes are automatically handled by the Light-Auth handlers. You don't need to create separate files for
                      each route.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Best Practices</CardTitle>
            <CardDescription>Recommendations for optimal routing integration</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
                  <h4 className="font-medium text-slate-900 dark:text-white mb-2">Use Consistent Base Paths</h4>
                  <p className="text-slate-600 dark:text-slate-400">
                    Keep your authentication routes under a consistent path structure to make your application easier to maintain.
                  </p>
                </div>

                <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
                  <h4 className="font-medium text-slate-900 dark:text-white mb-2">Update Callback URLs</h4>
                  <p className="text-slate-600 dark:text-slate-400">
                    When changing the base path, always update the callback URLs in both your OAuth provider configuration and your Light-Auth setup.
                  </p>
                </div>

                <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
                  <h4 className="font-medium text-slate-900 dark:text-white mb-2">Secure Your Routes</h4>
                  <p className="text-slate-600 dark:text-slate-400">
                    Consider adding additional security measures like rate limiting to your authentication routes to prevent abuse.
                  </p>
                </div>

                <div className="bg-white dark:bg-slate-900 p-4 rounded-lg border border-slate-200 dark:border-slate-800">
                  <h4 className="font-medium text-slate-900 dark:text-white mb-2">Test Your Routes</h4>
                  <p className="text-slate-600 dark:text-slate-400">
                    Always test your authentication routes thoroughly after setup to ensure they're working correctly.
                  </p>
                </div>
              </div>

              <div className="bg-emerald-50 dark:bg-emerald-950/30 border border-emerald-200 dark:border-emerald-800 rounded-lg p-4 mt-6">
                <div className="flex items-start">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="text-emerald-500 mr-2 mt-0.5"
                  >
                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14" />
                    <polyline points="22 4 12 14.01 9 11.01" />
                  </svg>
                  <div>
                    <h4 className="font-medium text-emerald-800 dark:text-emerald-300">Pro Tip</h4>
                    <p className="text-sm text-emerald-700 dark:text-emerald-400 mt-1">
                      For production applications, consider using environment variables to configure your base paths. This allows you to have different paths
                      for development, staging, and production environments without changing your code.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}
